name: Build, test, lint and coverage measurement

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-12

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Show xcodebuild version
        run: xcodebuild -version

      - name: Set Default Scheme
        run: |
          # Lists the targets and configurations in a project, or the schemes in a workspace
          xcodebuild -list -json

          # 1. Get available schemes in the project
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          
          # 2. Get the first scheme and target name parsing the JSON with Ruby and selecting the first element in the matrix
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['schemes'][0]")
          target=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")

          # 3. Store and displays the default scheme
          echo $default_scheme | cat >default_scheme
          echo Using default scheme: $default_scheme

          # 4. Store and displays the default target
          echo $default_target | cat >default_target
          echo Using default target: $default_target

      - name: Build
        env:
          scheme: ${{ 'default' }}
          target: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # 1. Get the list of available iPhone simulators, and get the first one
          xcrun xctrace list devices
          device=`xcrun xctrace list devices | grep -oE 'iPhone.*?[^\(]+' | sed -e "s/ Simulator//" | head -1 | awk '{$1=$1;print}'`
          
          # 2. Set the default scheme and target if selected on the previously step
          if [ $scheme = default ]; then scheme=$(cat default_scheme); fi
          if [ $target = default ]; then target=$(cat default_target); fi

          # 3. Perform the actual build (for testing) using the previously gatherer information
          xcodebuild build-for-testing -scheme "$scheme" -target "$target" -destination "platform=$platform,name=$device" 
      
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # 1. Get the list of available iPhone simulators, and get the first one
          device=`xcrun xctrace list devices | grep -oE 'iPhone.*?[^\(]+' | sed -e "s/ Simulator//" | head -1 | awk '{$1=$1;print}'`
          
          # 2. Set the default scheme and target if selected on the previously step
          if [ $scheme = default ]; then scheme=$(cat default_scheme); fi
          if [ $target = default ]; then target=$(cat default_target); fi

          # 3. Perform the actual testing using the build previously made
          xcodebuild test-without-building -scheme "$scheme" -target "$target" -destination "platform=$platform,name=$device"
          
  SwiftLint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: GitHub Action for SwiftLint
        uses: norio-nomura/action-swiftlint@3.2.1
  Tailor:
    runs-on: macos-latest
    steps:
      - name: Install Tailor
        run: |          
          brew update
          brew install tailor   
      - name: Checkout
        uses: actions/checkout@v3      
      - name: Static analysis using Tailor
        run: tailor .
  Lizard:
    runs-on: ubuntu-latest
    steps:
      - name: Install Lizard
        run: pip install lizard      
      - name: Checkout
        uses: actions/checkout@v3  
      - name: Code quality using Lizard
        run: lizard
