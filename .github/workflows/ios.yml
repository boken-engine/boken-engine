name: Build, test, lint and coverage measurement

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Default Scheme
        run: |
          # 1. Get available schemes in the project
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          
          # 2. Get the first scheme name parsing the JSON with Ruby and selecting the first element in the matrix
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")

          # 3. Store and displays the default scheme
          echo $default | cat >default
          echo Using default scheme: $default

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # 1. Get the list of available iPhone simulators, and get the first one
          device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
          
          # 2. Set the default scheme if selected on the previously step
          if [ $scheme = default ]; then scheme=$(cat default); fi

          # 3. If a workspace is found in the file tree, use it as object to be built. Else, use the project.
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`

          # 4. Perform the actual build (for testing) using the previously gatherer information
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -derivedDataPath ./output
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # 1. Get the list of available iPhone simulators, and get the first one
          device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`

          # 2. Set the default scheme if selected on the previously step
          if [ $scheme = default ]; then scheme=$(cat default); fi

          # 3. If a workspace is found in the file tree, use it as object to be built. Else, use the project.
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi        
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`

          # 4. Perform the actual testing using the build previously made
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -derivedDataPath ./output
          
      - name: Test Coverage
        uses: maxep/xcodebuild-lcov-action@0.1.0
        with:
            derived-data-path: ./output
            target: BokenEngine.framework
            output-file: ./output/lcov.info
        
  SwiftLint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: GitHub Action for SwiftLint
        uses: norio-nomura/action-swiftlint@3.2.1
        
  Tailor:
    runs-on: macos-latest
    steps:
      - name: Install Tailor
        run: |          
          brew update
          brew install tailor   
      - name: Checkout
        uses: actions/checkout@v2          
      - name: Static analysis using Tailor
        run: tailor .
        
  Lizard:
    runs-on: ubuntu-latest
    steps:
      - name: Install Lizard
        run: pip install lizard      
      - name: Checkout
        uses: actions/checkout@v2          
      - name: Code quality using Lizard
        run: lizard
